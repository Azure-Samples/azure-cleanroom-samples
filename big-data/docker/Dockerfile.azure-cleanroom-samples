# Override hooks for controlling az cleanroom extension version and installation source.
ARG EXTENSION_SOURCE=official
ARG EXTENSION_FILENAME=cleanroom-5.0.0-py2.py3-none-any
ARG EXTENSION_REGISTRY=mcr.microsoft.com/azurecleanroom/cli
ARG EXTENSION_TAG=5.0.0

FROM mcr.microsoft.com/powershell AS docker-azcli-base
# Required packages.
RUN apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
# Trust packages from docker, MSFT and Github.
RUN mkdir -p /etc/apt/keyrings
RUN install -m 0755 -d /etc/apt/keyrings
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
RUN chmod a+r /etc/apt/keyrings/docker.asc
RUN curl -sLS https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft.gpg > /dev/null
RUN chmod go+r /etc/apt/keyrings/microsoft.gpg
RUN curl -sLS https://cli.github.com/packages/githubcli-archive-keyring.gpg | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
RUN chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
# Install docker client to enable docker in docker.
COPY docker/docker.list /etc/apt/sources.list.d/docker.list
RUN apt-get update && apt-get install -y docker-ce-cli
# Install az cli.
ARG AZCLI_VERSION=2.75.0-1
COPY docker/azure-cli.sources /etc/apt/sources.list.d/azure-cli.sources
RUN apt-get update && apt-get install -y azure-cli=${AZCLI_VERSION}~jammy
# Install gh cli.
COPY docker/github.list /etc/apt/sources.list.d/github-cli.list
RUN apt-get update && apt-get install -y gh

FROM docker-azcli-base AS samples-base
# Required packages.
RUN apt-get update && apt-get install -y jq python3-pip
# Install azcopy.
WORKDIR /home/scratch
RUN curl -sLS https://aka.ms/downloadazcopy-v10-linux -o azcopy.tar.gz
RUN mkdir azcopy
RUN tar -xf ./azcopy.tar.gz -C ./azcopy --strip-components=1
RUN mv azcopy/azcopy /usr/bin
RUN chmod 755 /usr/bin/azcopy
# Install az cli extensions.
#RUN az extension add --name confcom -y --allow-preview true
# Install ORAS client.
RUN curl -LO "https://github.com/oras-project/oras/releases/download/v1.2.0/oras_1.2.0_linux_amd64.tar.gz"
RUN mkdir -p oras-install/
RUN tar -zxf oras_1.2.0_*.tar.gz -C oras-install/
RUN mv oras-install/oras /usr/local/bin/
# Install OPA client.
#RUN curl -L -o opa https://openpolicyagent.org/downloads/v0.70.0/opa_linux_amd64_static
#RUN mv opa /usr/bin
#RUN chmod 755 /usr/bin/opa
# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    chmod +x ./kubectl && \
    mv ./kubectl /usr/local/bin/kubectl
# Install pyjwt
RUN pip3 install --upgrade pyjwt
RUN apt-get install -y nano

FROM samples-base AS install-extension-official
# Install WHL from official source.
ARG EXTENSION_FILENAME
ARG EXTENSION_REGISTRY
ARG EXTENSION_TAG
ONBUILD RUN echo "Installing clean room extension '${EXTENSION_FILENAME}' from official source."
ONBUILD WORKDIR /home/scratch
ONBUILD RUN oras pull ${EXTENSION_REGISTRY}/cleanroom-whl:${EXTENSION_TAG}
ONBUILD RUN az extension add --source /home/scratch/${EXTENSION_FILENAME}.whl -y --allow-preview true

FROM samples-base AS install-extension-local
# Install WHL from local source.
ARG EXTENSION_FILENAME
ONBUILD RUN echo "Installing clean room extension '${EXTENSION_FILENAME}' from local source."
ONBUILD WORKDIR /home/scratch
ONBUILD COPY docker/${EXTENSION_FILENAME}.whl /home/scratch/
ONBUILD RUN az extension add --source /home/scratch/${EXTENSION_FILENAME}.whl -y --allow-preview true

FROM install-extension-${EXTENSION_SOURCE}
# Copy samples payload.
#WORKDIR /home/samples/demos
#COPY ./demos .
#WORKDIR /home/samples/scripts
#COPY ./scripts .
# Customize the powershell prompt by adding a custom profile
COPY ./scripts/common/ps-profile.ps1 /opt/microsoft/powershell/7/profile.ps1
# Done!
WORKDIR /home/samples
